
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery_basic_use_cases/Spectrogram/1_generate_spectrogram.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_basic_use_cases_Spectrogram_1_generate_spectrogram.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_basic_use_cases_Spectrogram_1_generate_spectrogram.py:


==============================================
Generation with default parameters
==============================================

This code will show you how to compute spectrograms

.. GENERATED FROM PYTHON SOURCE LINES 10-13

Prerequisites
================
Your dataset must be built before you can do any processing on it ; see the use case :ref:`sphx_glr_gallery_basic_use_cases_Dataset_1_build_dataset.py` to do this.

.. GENERATED FROM PYTHON SOURCE LINES 15-20

Spectrogram size : a subject of matter ? 
===============================================
Whatever you intend to do with it, spectrogram size is most often a subject of matter. For example, to perform manual annotation on the spectrograms of our example here, containing 
more than 40k spectra, the user should be aware that numerical compression during image generation and/or display on your screen will occur. To avoid this, it is recommended that to make this number of spectra as close as your horizontal screen resolution (ie approximately 2000 pixels, as a classical screen resolution is 1920x1080 pixels (horizontal pixels) x (vertical pixels) ).
It is also good to know that over-resoluted spectrograms are obtained at a higher memory cost, and sometimes may not fit at all in memory.

.. GENERATED FROM PYTHON SOURCE LINES 24-26

Codes
===============

.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: default


    from pathlib import Path
    from OSmOSE import Spectrogram
    import glob










.. GENERATED FROM PYTHON SOURCE LINES 34-36

Path and dataset names
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: default


    path_osmose_dataset = "/home6/cazaudo/Bureau/osmose_sample_datasets/"
    dataset_name = "SPM"
    campaign_name = ""








.. GENERATED FROM PYTHON SOURCE LINES 42-44

Run the class :class:`OSmOSE.Spectrogram.Spectrogram`
----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default


    spectrogram = Spectrogram(dataset_path = Path(path_osmose_dataset, campaign_name, dataset_name))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    No valid processed/adjust_metadata.csv found and no parameters provided. All attributes will be initialized to default values..  





.. GENERATED FROM PYTHON SOURCE LINES 48-49

Printing the spectrogram instance will give you all useful metadata of the dataset from which you want to compute spectrograms

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    print(spectrogram)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Metadata of SPM :
    - audio_file_origin_duration : 2700 (s) 
    - origin_sr : 32768 (Hz) 
    - start_date : 2010-08-19T17:00:00.000000-0300  
    - end_date : 2010-08-19T21:00:00.000000-0300  
    - audio_file_count : 5  
    - audio_file_origin_volume : 177.0 (MB) 
    - dataset_origin_volume : 1 (GB) 





.. GENERATED FROM PYTHON SOURCE LINES 53-55

You can check the size of spectrograms that will be generated using :meth:`OSmOSE.Spectrogram.Spectrogram.check_spectro_size`. This spectrogram is very over-resoluted, we will see in 
:ref:`sphx_glr_gallery_basic_use_cases_Spectrogram_2_tune_parameters.py` how we can spectrogram parameters to reduce this number.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default


    spectrogram.check_spectro_size()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    your smallest tile has a duration of: 2700.0 (s), with a number of spectra of 43199 

    Note that unless you have a 4K screen, unwanted numerical compression might occur when visualizing your spectrograms..


    your resolutions : time =  0.063 (s) / frequency =  16.0 (Hz)




.. GENERATED FROM PYTHON SOURCE LINES 59-62

Initialize spectrogram parameters
----------------------------------------------------------
Initialize everything needed for spectrogram computation ; in particular, this method will segment and/or resample audio files if needed

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default


    spectrogram.initialize()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    It seems these spectrogram parameters are already initialized. If it is an error or you want to rerun the initialization, add the `force_init` argument.




.. GENERATED FROM PYTHON SOURCE LINES 66-67

In this first tutorial we will see only one spectrogram parameter, namely the min / max values (in dB) of the spectrogram corlobar . We will see other parameters (for the moment set to their default values) in :ref:`sphx_glr_gallery_basic_use_cases_Spectrogram_2_tune_parameters.py`)

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default

    spectrogram.dynamic_min = -80
    spectrogram.dynamic_max = 10








.. GENERATED FROM PYTHON SOURCE LINES 71-74

Launch processing
----------------------------------------------------------
The method :meth:`OSmOSE.Spectrogram.Spectrogram.process_all_files` will generate spectrograms for the different pre segmented and/or resampled (if necessary) audio files

.. GENERATED FROM PYTHON SOURCE LINES 74-79

.. code-block:: default


    wav_path = glob.glob(path_osmose_dataset+f'{dataset_name}/data/audio/{spectrogram.spectro_duration}_{spectrogram.dataset_sr}/*wav')
    spectrogram.save_spectro_metadata(False)
    spectrogram.process_all_files(list_wav_to_process=wav_path)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Generating spectrograms for 2010_08_19T17:00:00.wav
    - data min : -0.8555279824615364 
     - data max : 0.9286070595072584 
     - data mean : -0.000854893044750974 
     - data std : 0.06355421666928916
    - min log spectro : -171.32814187343098 
     - max log spectro : 24.557514658684486 

    Generating spectrograms for 2010_08_19T18:00:00.wav
    - data min : -0.8105044527099247 
     - data max : 0.7767882521305696 
     - data mean : -0.0008526000596660116 
     - data std : 0.09646524022953828
    - min log spectro : -152.83956685104368 
     - max log spectro : 28.303554339777467 

    Generating spectrograms for 2010_08_19T19:00:00.wav
    - data min : -0.7276640687060715 
     - data max : 0.8514928012250652 
     - data mean : -0.0008558360722280932 
     - data std : 0.09669139339290979
    - min log spectro : -150.55453297187213 
     - max log spectro : 27.64431802556433 

    Generating spectrograms for 2010_08_19T20:00:00.wav
    - data min : -0.7757979558915236 
     - data max : 0.7455556889889781 
     - data mean : -0.0008408559673176853 
     - data std : 0.09621438469640585
    - min log spectro : -150.11680294537084 
     - max log spectro : 26.661430496854216 

    Generating spectrograms for 2010_08_19T21:00:00.wav
    - data min : -0.8768730436407871 
     - data max : 0.91906232136457 
     - data mean : -0.0008367635094691944 
     - data std : 0.15304445556714596
    - min log spectro : -175.59932238800258 
     - max log spectro : 28.78447530395903 





.. GENERATED FROM PYTHON SOURCE LINES 80-82

Visualize an example of spectrogram 
---------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 82-99

.. code-block:: default


    spectrogram_path = glob.glob(path_osmose_dataset+f'{dataset_name}/processed/spectrogram/{spectrogram.spectro_duration}_{spectrogram.dataset_sr}/{spectrogram.nfft}_{spectrogram.window_size}_{spectrogram.overlap}/image/*png')

    from matplotlib import pyplot as plt
    from matplotlib import image as mpimg
  
    image = mpimg.imread(spectrogram_path[2])
    plt.imshow(image, interpolation='nearest', aspect='auto')

    ax = plt.gca()
    ax.xaxis.set_tick_params(labelbottom=False)
    ax.yaxis.set_tick_params(labelleft=False)
    ax.set_xticks([])
    ax.set_yticks([])

    plt.show()




.. image-sg:: /gallery_basic_use_cases/Spectrogram/images/sphx_glr_1_generate_spectrogram_001.png
   :alt: 1 generate spectrogram
   :srcset: /gallery_basic_use_cases/Spectrogram/images/sphx_glr_1_generate_spectrogram_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (4 minutes 28.287 seconds)


.. _sphx_glr_download_gallery_basic_use_cases_Spectrogram_1_generate_spectrogram.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 1_generate_spectrogram.py <1_generate_spectrogram.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 1_generate_spectrogram.ipynb <1_generate_spectrogram.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
